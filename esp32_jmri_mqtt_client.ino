/*
 * ESP32 JMRI MQTT Client
 * 
 * This project provides an ESP32-based MQTT client for interfacing with JMRI
 * for model railroad control. Features include:
 * - Sensor feedback detection
 * - Turnout control
 * - Signal control
 * - OTA updates
 * - WiFi configuration via web interface
 * - MQTT communication with JMRI
 * 
 * Author: Generated by AI Assistant
 * Date: 2024
 */

#include "config.h"
#include <WiFi.h>
#include <PubSubClient.h>
#include <ArduinoJson.h>
#include <WebServer.h>
#include <Update.h>
#include <SPIFFS.h>
#include <Preferences.h>
#include <ArduinoOTA.h>

// WiFi configuration
const char* default_ssid = DEFAULT_SSID;
const char* default_password = DEFAULT_PASSWORD;
String wifi_ssid = "";
String wifi_password = "";

// MQTT topics
String mqtt_base_topic = String(MQTT_TOPIC_PREFIX) + "/" + WiFi.macAddress();
String mqtt_sensor_topic = mqtt_base_topic + "/sensors";
String mqtt_turnout_topic = mqtt_base_topic + "/turnouts";
String mqtt_signal_topic = mqtt_base_topic + "/signals";
String mqtt_status_topic = mqtt_base_topic + "/status";

// Global objects
WiFiClient espClient;
PubSubClient mqtt_client(espClient);
WebServer web_server(80);
Preferences preferences;

// State variables
bool wifi_configured = false;
bool mqtt_connected = false;
unsigned long last_mqtt_attempt = 0;
unsigned long last_status_update = 0;

// Sensor states
bool sensor_states[4] = {false, false, false, false};
bool last_sensor_states[4] = {false, false, false, false};

// Turnout states
bool turnout_states[2] = {false, false};

// Signal states
int signal_state = 0; // 0=red, 1=yellow, 2=green

void setup() {
  Serial.begin(SERIAL_BAUD_RATE);
  Serial.println("\n\n=== ESP32 JMRI MQTT Client ===");
  Serial.println("Firmware Version: " + String(FIRMWARE_VERSION));
  
  // Initialize pins
  initializePins();
  
  // Initialize SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("SPIFFS initialization failed");
  }
  
  // Initialize preferences
  preferences.begin("jmri_client", false);
  
  // Load saved WiFi credentials
  loadWiFiCredentials();
  
  // Load saved MQTT credentials
  loadMQTTCredentials();
  
  // Setup WiFi
  setupWiFi();
  
  // Setup MQTT
  setupMQTT();
  
  // Setup web server for configuration
  setupWebServer();
  
  // Setup OTA
  setupOTA();
  
  Serial.println("Setup complete!");
}

void loop() {
  // Feed the watchdog to prevent resets
  yield();
  
  // Handle WiFi
  if (WiFi.status() != WL_CONNECTED) {
    handleWiFiReconnection();
  }
  
  // Handle MQTT
  if (WiFi.status() == WL_CONNECTED) {
    handleMQTT();
  }
  
  // Handle sensors
  handleSensors();
  
  // Handle web server
  web_server.handleClient();
  
  // Handle OTA
  ArduinoOTA.handle();
  
  // Update status
  if (millis() - last_status_update > STATUS_UPDATE_INTERVAL) {
    updateStatus();
    last_status_update = millis();
  }
  
  delay(10);
}

void initializePins() {
  // Sensor pins (input with pull-up)
  pinMode(SENSOR_PIN_1, INPUT_PULLUP);
  pinMode(SENSOR_PIN_2, INPUT_PULLUP);
  pinMode(SENSOR_PIN_3, INPUT_PULLUP);
  pinMode(SENSOR_PIN_4, INPUT_PULLUP);
  
  // Turnout pins (output)
  pinMode(TURNOUT_PIN_1, OUTPUT);
  pinMode(TURNOUT_PIN_2, OUTPUT);
  digitalWrite(TURNOUT_PIN_1, LOW);
  digitalWrite(TURNOUT_PIN_2, LOW);
  
  // Signal pins (output)
  pinMode(SIGNAL_PIN_RED, OUTPUT);
  pinMode(SIGNAL_PIN_YELLOW, OUTPUT);
  pinMode(SIGNAL_PIN_GREEN, OUTPUT);
  digitalWrite(SIGNAL_PIN_RED, HIGH);   // Start with red
  digitalWrite(SIGNAL_PIN_YELLOW, LOW);
  digitalWrite(SIGNAL_PIN_GREEN, LOW);
  
  // Status LED
  pinMode(STATUS_LED, OUTPUT);
  digitalWrite(STATUS_LED, LOW);
}

void loadWiFiCredentials() {
  wifi_ssid = preferences.getString("wifi_ssid", "");
  wifi_password = preferences.getString("wifi_password", "");
  wifi_configured = (wifi_ssid.length() > 0);
  
  if (wifi_configured) {
    Serial.println("Loaded saved WiFi credentials for: " + wifi_ssid);
  } else {
    Serial.println("No saved WiFi credentials found");
  }
}

void loadMQTTCredentials() {
  // Load MQTT settings from preferences if they exist
  String broker = preferences.getString("mqtt_broker", "");
  int port = preferences.getInt("mqtt_port", 0);
  String client_id = preferences.getString("mqtt_client_id", "");
  String topic_prefix = preferences.getString("mqtt_topic_prefix", "");
  
  if (broker.length() > 0 && port > 0 && client_id.length() > 0 && topic_prefix.length() > 0) {
    Serial.println("Loaded saved MQTT credentials for broker: " + broker + ":" + String(port));
    // Update MQTT client settings
    mqtt_client.setServer(broker.c_str(), port);
    
    // Update topic strings
    mqtt_base_topic = String(topic_prefix) + "/" + WiFi.macAddress();
    mqtt_sensor_topic = mqtt_base_topic + "/sensors";
    mqtt_turnout_topic = mqtt_base_topic + "/turnouts";
    mqtt_signal_topic = mqtt_base_topic + "/signals";
    mqtt_status_topic = mqtt_base_topic + "/status";
  } else {
    Serial.println("No saved MQTT credentials found, using defaults from config.h");
  }
}

void setupWiFi() {
  if (wifi_configured) {
    // Try to connect to saved network
    Serial.println("Connecting to saved WiFi network: " + wifi_ssid);
    WiFi.begin(wifi_ssid.c_str(), wifi_password.c_str());
    
    int attempts = 0;
    while (WiFi.status() != WL_CONNECTED && attempts < WIFI_MAX_ATTEMPTS) {
      delay(500);
      Serial.print(".");
      attempts++;
    }
    
    if (WiFi.status() == WL_CONNECTED) {
      Serial.println("\nWiFi connected successfully!");
      Serial.println("IP address: " + WiFi.localIP().toString());
      digitalWrite(STATUS_LED, HIGH);
    } else {
      Serial.println("\nFailed to connect to saved WiFi");
      wifi_configured = false;
    }
  }
  
  if (!wifi_configured) {
    // Start configuration mode
    Serial.println("Starting WiFi configuration mode");
    WiFi.mode(WIFI_AP);
    WiFi.softAP(default_ssid, default_password);
    Serial.println("AP IP address: " + WiFi.softAPIP().toString());
    Serial.println("Connect to 'ESP32_Config' network with password '12345678'");
    Serial.println("Then navigate to http://192.168.4.1 to configure");
  }
}

void setupMQTT() {
  // Load MQTT settings from preferences if they exist, otherwise use defaults from config.h
  String broker = preferences.getString("mqtt_broker", MQTT_BROKER);
  int port = preferences.getInt("mqtt_port", MQTT_PORT);
  String client_id = preferences.getString("mqtt_client_id", MQTT_CLIENT_ID);
  String topic_prefix = preferences.getString("mqtt_topic_prefix", MQTT_TOPIC_PREFIX);
  
  // Update MQTT client settings
  mqtt_client.setServer(broker.c_str(), port);
  mqtt_client.setCallback(mqttCallback);
  mqtt_client.setKeepAlive(60);
  mqtt_client.setSocketTimeout(30);
  
  // Update topic strings with loaded values
  mqtt_base_topic = String(topic_prefix) + "/" + WiFi.macAddress();
  mqtt_sensor_topic = mqtt_base_topic + "/sensors";
  mqtt_turnout_topic = mqtt_base_topic + "/turnouts";
  mqtt_signal_topic = mqtt_base_topic + "/signals";
  mqtt_status_topic = mqtt_base_topic + "/status";
}

void setupWebServer() {
  // Configuration page
  web_server.on("/", HTTP_GET, handleRoot);
  web_server.on("/configure", HTTP_POST, handleWiFiConfig);
  web_server.on("/configure_mqtt", HTTP_POST, handleMQTTConfig); // New handler for MQTT config
  web_server.on("/status", HTTP_GET, handleStatus);
  web_server.on("/restart", HTTP_POST, handleRestart);
  
  // OTA update page
  web_server.on("/update", HTTP_GET, handleUpdatePage);
  web_server.on("/doUpdate", HTTP_POST, handleDoUpdate, handleUpdateBody);
  
  web_server.begin();
  Serial.println("Web server started");
}

void setupOTA() {
  Serial.println("Setting up OTA...");
  
  ArduinoOTA.setHostname(DEVICE_NAME);
  ArduinoOTA.setPassword("admin");
  
  // Set OTA port (default is 3232)
  ArduinoOTA.setPort(3232);
  
  ArduinoOTA.onStart([]() {
    Serial.println("=== OTA Update Started ===");
    Serial.println("Disabling watchdog during update...");
    digitalWrite(STATUS_LED, LOW);
  });
  
  ArduinoOTA.onProgress([](unsigned int progress, unsigned int total) {
    Serial.printf("OTA Progress: %u%%\n", (progress / (total / 100)));
    // Feed watchdog during progress
    yield();
  });
  
  ArduinoOTA.onEnd([]() {
    Serial.println("=== OTA Update Completed ===");
    Serial.println("Update successful, restarting...");
    digitalWrite(STATUS_LED, HIGH);
  });
  
  ArduinoOTA.onError([](ota_error_t error) {
    Serial.printf("=== OTA Error: %u ===\n", error);
    Serial.println("Error details:");
    switch (error) {
      case OTA_AUTH_ERROR:
        Serial.println("Auth Failed");
        break;
      case OTA_BEGIN_ERROR:
        Serial.println("Begin Failed");
        break;
      case OTA_CONNECT_ERROR:
        Serial.println("Connect Failed");
        break;
      case OTA_RECEIVE_ERROR:
        Serial.println("Receive Failed");
        break;
      case OTA_END_ERROR:
        Serial.println("End Failed");
        break;
      default:
        Serial.println("Unknown Error");
        break;
    }
    digitalWrite(STATUS_LED, LOW);
  });
  
  ArduinoOTA.begin();
  Serial.println("OTA ready on port 3232");
  Serial.println("You can also use Arduino IDE or other OTA tools to update");
}

void handleWiFiReconnection() {
  static unsigned long last_reconnect_attempt = 0;
  unsigned long current_time = millis();
  
  if (current_time - last_reconnect_attempt > WIFI_RECONNECT_INTERVAL) { // Try every 30 seconds
    Serial.println("Attempting WiFi reconnection...");
    WiFi.reconnect();
    last_reconnect_attempt = current_time;
  }
}

void handleMQTT() {
  if (!mqtt_client.connected()) {
    if (millis() - last_mqtt_attempt > MQTT_RETRY_INTERVAL) {
      mqttReconnect();
      last_mqtt_attempt = millis();
    }
  } else {
    mqtt_client.loop();
  }
}

void mqttReconnect() {
  Serial.println("Attempting MQTT connection...");
  
  if (mqtt_client.connect(MQTT_CLIENT_ID)) {
    Serial.println("MQTT connected");
    mqtt_connected = true;
    
    // Subscribe to control topics
    mqtt_client.subscribe((mqtt_turnout_topic + "/+/control").c_str());
    mqtt_client.subscribe((mqtt_signal_topic + "/+/control").c_str());
    
    // Publish initial status
    publishStatus();
  } else {
    Serial.printf("MQTT connection failed, rc=%d\n", mqtt_client.state());
    mqtt_connected = false;
  }
}

void mqttCallback(char* topic, byte* payload, unsigned int length) {
  String topic_str = String(topic);
  String payload_str = "";
  
  for (int i = 0; i < length; i++) {
    payload_str += (char)payload[i];
  }
  
  Serial.println("MQTT message received:");
  Serial.println("  Topic: " + topic_str);
  Serial.println("  Payload: " + payload_str);
  
  // Parse JSON payload
  DynamicJsonDocument doc(256);
  DeserializationError error = deserializeJson(doc, payload_str);
  
  if (error) {
    Serial.println("JSON parsing failed");
    return;
  }
  
  // Handle turnout control
  if (topic_str.indexOf("/turnouts/") > 0) {
    handleTurnoutControl(topic_str, doc);
  }
  
  // Handle signal control
  if (topic_str.indexOf("/signals/") > 0) {
    handleSignalControl(topic_str, doc);
  }
}

void handleTurnoutControl(String topic, JsonDocument& doc) {
  // Extract turnout number from topic
  int turnout_num = 0;
  if (topic.indexOf("/turnouts/1/") > 0) turnout_num = 0;
  else if (topic.indexOf("/turnouts/2/") > 0) turnout_num = 1;
  
  if (doc.containsKey("position")) {
    String position = doc["position"].as<String>();
    bool new_state = (position == "thrown" || position == "true");
    
    if (turnout_num == 0) {
      digitalWrite(TURNOUT_PIN_1, new_state ? HIGH : LOW);
      turnout_states[0] = new_state;
    } else if (turnout_num == 1) {
      digitalWrite(TURNOUT_PIN_2, new_state ? HIGH : LOW);
      turnout_states[1] = new_state;
    }
    
    // Publish status update
    publishTurnoutStatus(turnout_num + 1);
  }
}

void handleSignalControl(String topic, JsonDocument& doc) {
  if (doc.containsKey("aspect")) {
    String aspect = doc["aspect"].as<String>();
    
    if (aspect == "red") {
      signal_state = 0;
      digitalWrite(SIGNAL_PIN_RED, HIGH);
      digitalWrite(SIGNAL_PIN_YELLOW, LOW);
      digitalWrite(SIGNAL_PIN_GREEN, LOW);
    } else if (aspect == "yellow") {
      signal_state = 1;
      digitalWrite(SIGNAL_PIN_RED, LOW);
      digitalWrite(SIGNAL_PIN_YELLOW, HIGH);
      digitalWrite(SIGNAL_PIN_GREEN, LOW);
    } else if (aspect == "green") {
      signal_state = 2;
      digitalWrite(SIGNAL_PIN_RED, LOW);
      digitalWrite(SIGNAL_PIN_YELLOW, LOW);
      digitalWrite(SIGNAL_PIN_GREEN, HIGH);
    }
    
    // Publish status update
    publishSignalStatus();
  }
}

void handleSensors() {
  // Read sensor states
  sensor_states[0] = !digitalRead(SENSOR_PIN_1); // Inverted due to pull-up
  sensor_states[1] = !digitalRead(SENSOR_PIN_2);
  sensor_states[2] = !digitalRead(SENSOR_PIN_3);
  sensor_states[3] = !digitalRead(SENSOR_PIN_4);
  
  // Check for changes and publish updates
  for (int i = 0; i < 4; i++) {
    if (sensor_states[i] != last_sensor_states[i]) {
      publishSensorStatus(i + 1);
      last_sensor_states[i] = sensor_states[i];
    }
  }
}

void publishSensorStatus(int sensor_num) {
  if (!mqtt_connected) return;
  
  DynamicJsonDocument doc(128);
  doc["sensor"] = sensor_num;
  doc["state"] = sensor_states[sensor_num - 1] ? "occupied" : "clear";
  doc["timestamp"] = millis();
  
  String json_string;
  serializeJson(doc, json_string);
  
  String topic = mqtt_sensor_topic + "/" + String(sensor_num) + "/status";
  mqtt_client.publish(topic.c_str(), json_string.c_str());
  
  Serial.println("Published sensor " + String(sensor_num) + " status: " + json_string);
}

void publishTurnoutStatus(int turnout_num) {
  if (!mqtt_connected) return;
  
  DynamicJsonDocument doc(128);
  doc["turnout"] = turnout_num;
  doc["position"] = turnout_states[turnout_num - 1] ? "thrown" : "normal";
  doc["timestamp"] = millis();
  
  String json_string;
  serializeJson(doc, json_string);
  
  String topic = mqtt_turnout_topic + "/" + String(turnout_num) + "/status";
  mqtt_client.publish(topic.c_str(), json_string.c_str());
}

void publishSignalStatus() {
  if (!mqtt_connected) return;
  
  DynamicJsonDocument doc(128);
  doc["signal"] = 1;
  doc["aspect"] = (signal_state == 0) ? "red" : (signal_state == 1) ? "yellow" : "green";
  doc["timestamp"] = millis();
  
  String json_string;
  serializeJson(doc, json_string);
  
  String topic = mqtt_signal_topic + "/1/status";
  mqtt_client.publish(topic.c_str(), json_string.c_str());
}

void publishStatus() {
  if (!mqtt_connected) return;
  
  DynamicJsonDocument doc(512);
  doc["device"] = DEVICE_NAME;
  doc["version"] = FIRMWARE_VERSION;
  doc["ip"] = WiFi.localIP().toString();
  doc["rssi"] = WiFi.RSSI();
  doc["uptime"] = millis();
  
  // Add sensor states
  JsonArray sensors = doc.createNestedArray("sensors");
  for (int i = 0; i < 4; i++) {
    JsonObject sensor = sensors.createNestedObject();
    sensor["id"] = i + 1;
    sensor["state"] = sensor_states[i] ? "occupied" : "clear";
  }
  
  // Add turnout states
  JsonArray turnouts = doc.createNestedArray("turnouts");
  for (int i = 0; i < 2; i++) {
    JsonObject turnout = turnouts.createNestedObject();
    turnout["id"] = i + 1;
    turnout["position"] = turnout_states[i] ? "thrown" : "normal";
  }
  
  // Add signal state
  JsonObject signal = doc.createNestedObject("signal");
  signal["id"] = 1;
  signal["aspect"] = (signal_state == 0) ? "red" : (signal_state == 1) ? "yellow" : "green";
  
  String json_string;
  serializeJson(doc, json_string);
  
  mqtt_client.publish(mqtt_status_topic.c_str(), json_string.c_str());
}

void updateStatus() {
  if (mqtt_connected) {
    publishStatus();
  }
}

// Web server handlers
void handleRoot() {
  // Load current MQTT settings for form pre-population
  String current_broker = preferences.getString("mqtt_broker", MQTT_BROKER);
  int current_port = preferences.getInt("mqtt_port", MQTT_PORT);
  String current_client_id = preferences.getString("mqtt_client_id", MQTT_CLIENT_ID);
  String current_topic_prefix = preferences.getString("mqtt_topic_prefix", MQTT_TOPIC_PREFIX);
  
  // Get system information for debugging
  size_t freeSketchSpace = ESP.getFreeSketchSpace();
  size_t freeHeap = ESP.getFreeHeap();
  uint32_t flashChipSize = ESP.getFlashChipSize();
  String sdkVersion = ESP.getSdkVersion();
  
  String html = "<!DOCTYPE html>";
  html += "<html>";
  html += "<head>";
  html += "    <title>ESP32 JMRI Client Configuration</title>";
  html += "    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">";
  html += "    <style>";
  html += "        body { font-family: Arial, sans-serif; margin: 20px; }";
  html += "        .container { max-width: 600px; margin: 0 auto; }";
  html += "        .form-group { margin-bottom: 15px; }";
  html += "        label { display: block; margin-bottom: 5px; font-weight: bold; }";
  html += "        input[type=\"text\"], input[type=\"password\"] { width: 100%; padding: 8px; border: 1px solid #ddd; border-radius: 4px; }";
  html += "        button { background-color: #4CAF50; color: white; padding: 10px 20px; border: none; border-radius: 4px; cursor: pointer; }";
  html += "        button:hover { background-color: #45a049; }";
  html += "        .status { margin-top: 20px; padding: 10px; border-radius: 4px; }";
  html += "        .success { background-color: #d4edda; color: #155724; border: 1px solid #c3e6cb; }";
  html += "        .error { background-color: #f8d7da; color: #721c24; border: 1px solid #f5c6cb; }";
  html += "        h3 { margin-top: 30px; margin-bottom: 15px; color: #333; border-bottom: 2px solid #4CAF50; padding-bottom: 5px; }";
  html += "    </style>";
  html += "</head>";
  html += "<body>";
  html += "    <div class=\"container\">";
  html += "        <h1>ESP32 JMRI Client Configuration</h1>";
  html += "        ";
  html += "        <form id=\"wifiForm\">";
  html += "            <div class=\"form-group\">";
  html += "                <label for=\"ssid\">WiFi SSID:</label>";
  html += "                <input type=\"text\" id=\"ssid\" name=\"ssid\" value=\"" + wifi_ssid + "\" required>";
  html += "            </div>";
  html += "            ";
  html += "            <div class=\"form-group\">";
  html += "                <label for=\"password\">WiFi Password:</label>";
  html += "                <input type=\"password\" id=\"password\" name=\"password\" value=\"" + wifi_password + "\" required>";
  html += "            </div>";
  html += "            ";
  html += "            <button type=\"submit\">Save WiFi Configuration</button>";
  html += "        </form>";
  html += "        ";
  html += "        <h3>MQTT Configuration</h3>";
  html += "        <form id=\"mqttForm\">";
  html += "            <div class=\"form-group\">";
  html += "                <label for=\"mqtt_broker\">MQTT Broker IP:</label>";
  html += "                <input type=\"text\" id=\"mqtt_broker\" name=\"mqtt_broker\" value=\"" + current_broker + "\" required>";
  html += "            </div>";
  html += "            ";
  html += "            <div class=\"form-group\">";
  html += "                <label for=\"mqtt_port\">MQTT Port:</label>";
  html += "                <input type=\"number\" id=\"mqtt_port\" name=\"mqtt_port\" value=\"" + String(current_port) + "\" min=\"1\" max=\"65535\" required>";
  html += "            </div>";
  html += "            ";
  html += "            <div class=\"form-group\">";
  html += "                <label for=\"mqtt_client_id\">MQTT Client ID:</label>";
  html += "                <input type=\"text\" id=\"mqtt_client_id\" name=\"mqtt_client_id\" value=\"" + current_client_id + "\" required>";
  html += "            </div>";
  html += "            ";
  html += "            <div class=\"form-group\">";
  html += "                <label for=\"mqtt_topic_prefix\">MQTT Topic Prefix:</label>";
  html += "                <input type=\"text\" id=\"mqtt_topic_prefix\" name=\"mqtt_topic_prefix\" value=\"" + current_topic_prefix + "\" required>";
  html += "            </div>";
  html += "            ";
  html += "            <button type=\"submit\">Save MQTT Configuration</button>";
  html += "        </form>";
  html += "        ";
  html += "        <div class=\"form-group\">";
  html += "            <button onclick=\"checkStatus()\">Check Status</button>";
  html += "            <button onclick=\"restart()\">Restart Device</button>";
  html += "        </div>";
  html += "        ";
  html += "        <div id=\"status\"></div>";
  html += "        ";
  html += "        <div class=\"form-group\">";
  html += "            <h3>OTA Update</h3>";
  html += "            <form id=\"updateForm\" enctype=\"multipart/form-data\">";
  html += "                <input type=\"file\" id=\"firmware\" name=\"firmware\" accept=\".bin\" required>";
  html += "                <button type=\"submit\">Upload Firmware</button>";
  html += "            </form>";
  html += "        </div>";
  html += "    </div>";
  html += "    ";
  html += "    <script>";
  html += "        document.getElementById('wifiForm').onsubmit = function(e) {";
  html += "            e.preventDefault();";
  html += "            ";
  html += "            const formData = new FormData();";
  html += "            formData.append('ssid', document.getElementById('ssid').value);";
  html += "            formData.append('password', document.getElementById('password').value);";
  html += "            ";
  html += "            fetch('/configure', {";
  html += "                method: 'POST',";
  html += "                body: formData";
  html += "            })";
  html += "            .then(response => response.text())";
  html += "            .then(data => {";
  html += "                document.getElementById('status').innerHTML = '<div class=\"status success\">' + data + '</div>';";
  html += "            })";
  html += "            .catch(error => {";
  html += "                document.getElementById('status').innerHTML = '<div class=\"status error\">Error: ' + error + '</div>';";
  html += "            });";
  html += "        };";
  html += "        ";
  html += "        document.getElementById('mqttForm').onsubmit = function(e) {";
  html += "            e.preventDefault();";
  html += "            ";
  html += "            const formData = new FormData();";
  html += "            formData.append('mqtt_broker', document.getElementById('mqtt_broker').value);";
  html += "            formData.append('mqtt_port', document.getElementById('mqtt_port').value);";
  html += "            formData.append('mqtt_client_id', document.getElementById('mqtt_client_id').value);";
  html += "            formData.append('mqtt_topic_prefix', document.getElementById('mqtt_topic_prefix').value);";
  html += "            ";
  html += "            fetch('/configure_mqtt', {";
  html += "                method: 'POST',";
  html += "                body: formData";
  html += "            })";
  html += "            .then(response => response.text())";
  html += "            .then(data => {";
  html += "                document.getElementById('status').innerHTML = '<div class=\"status success\">' + data + '</div>';";
  html += "            })";
  html += "            .catch(error => {";
  html += "                document.getElementById('status').innerHTML = '<div class=\"status error\">Error: ' + error + '</div>';";
  html += "            });";
  html += "        };";
  html += "        ";
  html += "        function checkStatus() {";
  html += "            fetch('/status')";
  html += "            .then(response => response.json())";
  html += "            .then(data => {";
  html += "                document.getElementById('status').innerHTML = '<div class=\"status success\"><pre>' + JSON.stringify(data, null, 2) + '</pre></div>';";
  html += "            })";
  html += "            .catch(error => {";
  html += "                document.getElementById('status').innerHTML = '<div class=\"status error\">Error: ' + error + '</div>';";
  html += "            });";
  html += "        }";
  html += "        ";
  html += "        function restart() {";
  html += "            if (confirm('Are you sure you want to restart the device?')) {";
  html += "                fetch('/restart', { method: 'POST' })";
  html += "                .then(() => {";
  html += "                    document.getElementById('status').innerHTML = '<div class=\"status success\">Device restarting...</div>';";
  html += "            });";
  html += "            }";
  html += "        }";
  html += "        ";
  html += "        document.getElementById('updateForm').onsubmit = function(e) {";
  html += "            e.preventDefault();";
  html += "            ";
  html += "            const formData = new FormData();";
  html += "            formData.append('firmware', document.getElementById('firmware').files[0]);";
  html += "            ";
  html += "            fetch('/doUpdate', {";
  html += "                method: 'POST',";
  html += "                body: formData";
  html += "            })";
  html += "            .then(response => response.text())";
  html += "            .then(data => {";
  html += "                document.getElementById('status').innerHTML = '<div class=\"status success\">' + data + '</div>';";
  html += "            })";
  html += "            .catch(error => {";
  html += "                document.getElementById('status').innerHTML = '<div class=\"status error\">Error: ' + error + '</div>';";
  html += "            });";
  html += "        };";
  html += "    </script>";
  html += "</body>";
  html += "</html>";
  
  web_server.send(200, "text/html", html);
}

void handleWiFiConfig() {
  if (web_server.hasArg("ssid") && web_server.hasArg("password")) {
    String new_ssid = web_server.arg("ssid");
    String new_password = web_server.arg("password");
    
    // Save to preferences
    preferences.putString("wifi_ssid", new_ssid);
    preferences.putString("wifi_password", new_password);
    
    wifi_ssid = new_ssid;
    wifi_password = new_password;
    wifi_configured = true;
    
    // Restart WiFi connection
    WiFi.disconnect();
    delay(1000);
    WiFi.begin(wifi_ssid.c_str(), wifi_password.c_str());
    
    web_server.send(200, "text/plain", "WiFi configuration saved. Device will connect to the new network.");
  } else {
    web_server.send(400, "text/plain", "Missing SSID or password");
  }
}

void handleMQTTConfig() {
  if (web_server.hasArg("mqtt_broker") && web_server.hasArg("mqtt_port") && web_server.hasArg("mqtt_client_id") && web_server.hasArg("mqtt_topic_prefix")) {
    String new_broker = web_server.arg("mqtt_broker");
    int new_port = web_server.arg("mqtt_port").toInt();
    String new_client_id = web_server.arg("mqtt_client_id");
    String new_topic_prefix = web_server.arg("mqtt_topic_prefix");

    // Save to preferences
    preferences.putString("mqtt_broker", new_broker);
    preferences.putInt("mqtt_port", new_port);
    preferences.putString("mqtt_client_id", new_client_id);
    preferences.putString("mqtt_topic_prefix", new_topic_prefix);

    // Update MQTT client settings
    mqtt_client.setServer(new_broker.c_str(), new_port);
    
    // Update topic strings
    mqtt_base_topic = String(new_topic_prefix) + "/" + WiFi.macAddress();
    mqtt_sensor_topic = mqtt_base_topic + "/sensors";
    mqtt_turnout_topic = mqtt_base_topic + "/turnouts";
    mqtt_signal_topic = mqtt_base_topic + "/signals";
    mqtt_status_topic = mqtt_base_topic + "/status";

    // Reconnect MQTT
    mqtt_client.disconnect();
    delay(1000);
    
    // Try to reconnect with new settings
    if (mqtt_client.connect(new_client_id.c_str())) {
      Serial.println("MQTT reconnected with new configuration");
      mqtt_connected = true;
      
      // Resubscribe to control topics
      mqtt_client.subscribe((mqtt_turnout_topic + "/+/control").c_str());
      mqtt_client.subscribe((mqtt_signal_topic + "/+/control").c_str());
      
      // Publish updated status
      publishStatus();
    } else {
      Serial.println("Failed to reconnect to MQTT with new configuration");
      mqtt_connected = false;
    }

    web_server.send(200, "text/plain", "MQTT configuration saved. Device will reconnect to MQTT broker.");
  } else {
    web_server.send(400, "text/plain", "Missing MQTT configuration parameters");
  }
}

void handleStatus() {
  DynamicJsonDocument doc(512);
  doc["device"] = DEVICE_NAME;
  doc["version"] = FIRMWARE_VERSION;
  doc["wifi_connected"] = (WiFi.status() == WL_CONNECTED);
  doc["wifi_ssid"] = wifi_ssid;
  doc["ip_address"] = WiFi.localIP().toString();
  doc["mqtt_connected"] = mqtt_connected;
  
  // Add MQTT configuration info
  doc["mqtt_broker"] = preferences.getString("mqtt_broker", MQTT_BROKER);
  doc["mqtt_port"] = preferences.getInt("mqtt_port", MQTT_PORT);
  doc["mqtt_client_id"] = preferences.getString("mqtt_client_id", MQTT_CLIENT_ID);
  doc["mqtt_topic_prefix"] = preferences.getString("mqtt_topic_prefix", MQTT_TOPIC_PREFIX);
  
  doc["uptime"] = millis();
  
  String json_string;
  serializeJson(doc, json_string);
  
  web_server.send(200, "application/json", json_string);
}

void handleRestart() {
  web_server.send(200, "text/plain", "Device restarting...");
  delay(1000);
  ESP.restart();
}

void handleUpdatePage() {
  String html = "<!DOCTYPE html>";
  html += "<html>";
  html += "<head>";
  html += "    <title>OTA Update</title>";
  html += "    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">";
  html += "    <style>";
  html += "        body { font-family: Arial, sans-serif; margin: 20px; }";
  html += "        .container { max-width: 600px; margin: 0 auto; }";
  html += "        .form-group { margin-bottom: 15px; }";
  html += "        input[type=\"file\"] { margin-bottom: 10px; }";
  html += "        button { background-color: #4CAF50; color: white; padding: 10px 20px; border: none; border-radius: 4px; cursor: pointer; }";
  html += "        .progress { width: 100%; background-color: #f0f0f0; border-radius: 4px; margin: 10px 0; }";
  html += "        .progress-bar { height: 20px; background-color: #4CAF50; border-radius: 4px; width: 0%; transition: width 0.3s; }";
  html += "    </style>";
  html += "</head>";
  html += "<body>";
  html += "    <div class=\"container\">";
  html += "        <h1>OTA Firmware Update</h1>";
  html += "        <form id=\"updateForm\" enctype=\"multipart/form-data\">";
  html += "            <div class=\"form-group\">";
  html += "                <label for=\"firmware\">Select firmware file (.bin):</label>";
  html += "                <input type=\"file\" id=\"firmware\" name=\"firmware\" accept=\".bin\" required>";
  html += "            </div>";
  html += "            <button type=\"submit\">Upload Firmware</button>";
  html += "        </form>";
  html += "        ";
  html += "        <div class=\"progress\">";
  html += "            <div class=\"progress-bar\" id=\"progressBar\"></div>";
  html += "        </div>";
  html += "        ";
  html += "        <div id=\"status\"></div>";
  html += "    </div>";
  html += "    ";
  html += "    <script>";
  html += "        document.getElementById('updateForm').onsubmit = function(e) {";
  html += "            e.preventDefault();";
  html += "            ";
  html += "            const file = document.getElementById('firmware').files[0];";
  html += "            if (!file) {";
  html += "                alert('Please select a file');";
  html += "                return;";
  html += "            }";
  html += "            ";
  html += "            const formData = new FormData();";
  html += "            formData.append('firmware', file);";
  html += "            ";
  html += "            const xhr = new XMLHttpRequest();";
  html += "            ";
  html += "            xhr.upload.onprogress = function(e) {";
  html += "                if (e.lengthComputable) {";
  html += "                    const percentComplete = (e.loaded / e.total) * 100;";
  html += "                    document.getElementById('progressBar').style.width = percentComplete + '%';";
  html += "                }";
  html += "            };";
  html += "            ";
  html += "            xhr.onload = function() {";
  html += "                if (xhr.status === 200) {";
  html += "                    document.getElementById('status').innerHTML = '<div style=\"color: green;\">Update successful! Device will restart.</div>';";
  html += "                } else {";
  html += "                    document.getElementById('status').innerHTML = '<div style=\"color: red;\">Update failed: ' + xhr.responseText + '</div>';";
  html += "                }";
  html += "            };";
  html += "            ";
  html += "            xhr.onerror = function() {";
  html += "                document.getElementById('status').innerHTML = '<div style=\"color: red;\">Update failed</div>';";
  html += "            };";
  html += "            ";
  html += "            xhr.open('POST', '/doUpdate');";
  html += "            xhr.send(formData);";
  html += "        };";
  html += "    </script>";
  html += "</body>";
  html += "</html>";
  
  web_server.send(200, "text/html", html);
}

void handleDoUpdate() {
  web_server.sendHeader("Connection", "close");
  
  if (Update.hasError()) {
    String error_msg = "Update failed: " + String(Update.errorString());
    Serial.println(error_msg);
    web_server.send(500, "text/plain", error_msg);
  } else {
    Serial.println("Update successful, restarting device...");
    web_server.send(200, "text/plain", "Update successful! Device will restart in 3 seconds...");
    delay(3000);
    ESP.restart();
  }
}

void handleUpdateBody() {
  static size_t totalSize = 0;
  static size_t currentSize = 0;
  
  // Get the firmware file from the request
  HTTPUpload& upload = web_server.upload();
  
  // Feed watchdog at the start of each upload event
  yield();
  
  if (upload.status == UPLOAD_FILE_START) {
    Serial.println("=== OTA Update Started ===");
    Serial.println("File name: " + upload.filename);
    Serial.println("File size: " + String(upload.totalSize));
    
    // Print system information for debugging
    Serial.println("System Info:");
    Serial.println("  Free Sketch Space: " + String(ESP.getFreeSketchSpace()) + " bytes");
    Serial.println("  Free Heap: " + String(ESP.getFreeHeap()) + " bytes");
    Serial.println("  Flash Chip Size: " + String(ESP.getFlashChipSize()) + " bytes");
    Serial.println("  Max OTA Size: " + String(ESP.getFreeSketchSpace() - 0x1000) + " bytes");
    
    // Check if we have enough space
    if (upload.totalSize > (ESP.getFreeSketchSpace() - 0x1000)) {
      String error_msg = "Not enough space to begin OTA. Need: " + String(upload.totalSize) + 
                        " bytes, Available: " + String(ESP.getFreeSketchSpace() - 0x1000) + " bytes";
      Serial.println(error_msg);
      web_server.send(400, "text/plain", error_msg);
      return;
    }
    
    // Begin the update
    if (!Update.begin(upload.totalSize)) {
      String error_msg = "Update begin failed: " + String(Update.errorString());
      Serial.println(error_msg);
      web_server.send(400, "text/plain", error_msg);
      return;
    }
    
    totalSize = upload.totalSize;
    currentSize = 0;
    
    Serial.println("Update begin successful, total size: " + String(totalSize));
    
  } else if (upload.status == UPLOAD_FILE_WRITE) {
    // Write the received data
    if (Update.write(upload.buf, upload.currentSize)) {
      currentSize += upload.currentSize;
      Serial.printf("Progress: %u%% (%u/%u bytes)\n", 
                   (currentSize * 100) / totalSize, currentSize, totalSize);
      
      // Feed the watchdog to prevent reset
      yield();
      
      // Add a small delay to prevent overwhelming the system
      delay(1);
      
    } else {
      String error_msg = "Update write failed: " + String(Update.errorString());
      Serial.println(error_msg);
      Serial.println("Current size: " + String(currentSize) + "/" + String(totalSize));
      web_server.send(500, "text/plain", error_msg);
      return;
    }
    
  } else if (upload.status == UPLOAD_FILE_END) {
    // Finalize the update
    Serial.println("Upload complete, finalizing update...");
    Serial.println("Final size: " + String(currentSize) + "/" + String(totalSize));
    
    if (Update.end()) {
      Serial.println("Update end successful");
      Serial.println("Update completed successfully!");
      
      // Verify the update
      if (Update.hasError()) {
        String error_msg = "Update verification failed: " + String(Update.errorString());
        Serial.println(error_msg);
        web_server.send(500, "text/plain", error_msg);
        return;
      }
      
      Serial.println("Update verified successfully!");
      Serial.println("Device will restart in 3 seconds...");
      web_server.send(200, "text/plain", "Update completed successfully! Device will restart in 3 seconds...");
      
      // Restart after a delay to allow response to be sent
      delay(3000);
      ESP.restart();
      
    } else {
      String error_msg = "Update end failed: " + String(Update.errorString());
      Serial.println(error_msg);
      web_server.send(500, "text/plain", error_msg);
      return;
    }
  }
}
