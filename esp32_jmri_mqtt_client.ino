/*
 * ESP32 JMRI MQTT Client
 * 
 * This project provides an ESP32-based MQTT client for interfacing with JMRI
 * for model railroad control. Features include:
 * - Sensor feedback detection
 * - Turnout control
 * - Signal control
 * - OTA updates
 * - WiFi configuration via web interface
 * - MQTT communication with JMRI
 * 
 * Author: Generated by AI Assistant
 * Date: 2024
 */

#include "config.h"
#include <WiFi.h>
#include <esp_wifi.h>
#include <PubSubClient.h>
#include <ArduinoJson.h>
#include <WebServer.h>
#include <Update.h>
#include <SPIFFS.h>
#include <Preferences.h>
#include <ArduinoOTA.h>
#include <ESPmDNS.h>
#include "html_content.h"

// WiFi configuration
String default_ssid = "";  // Will be set in setup using MAC address
const char* default_password = DEFAULT_PASSWORD;
String wifi_ssid = "";
String wifi_password = "";

// Function to get unique SSID suffix from MAC address
String getUniqueId() {
  uint8_t mac[6];
  WiFi.softAPmacAddress(mac);  // Get AP MAC address specifically
  
  // Use last 4 digits of MAC
  char suffix[5];
  snprintf(suffix, sizeof(suffix), "%02X%02X", mac[4], mac[5]);
  Serial.printf("Using last 4 digits of AP MAC: %s\n", suffix);
  
  return String(suffix);
}

// MQTT topics - Updated to match JMRI format
String mqtt_base_topic = String(MQTT_TOPIC_PREFIX) + "/";
String mqtt_sensor_topic = mqtt_base_topic + "sensor/";
String mqtt_turnout_topic = mqtt_base_topic + "turnout/";
String mqtt_signal_topic = mqtt_base_topic + "signal/";
String mqtt_light_topic = mqtt_base_topic + "light/";
String mqtt_status_topic = mqtt_base_topic + "status/";

// Global objects
WiFiClient espClient;
PubSubClient mqtt_client(espClient);
WebServer web_server(80);
Preferences preferences;

// MQTT broker info storage
String mqtt_broker_ip = "";
String mqtt_broker_hostname = "";  // For mDNS hostname like "rpi-jmri.local"
int mqtt_broker_port = 0;
String mqtt_channel_name = "";

// Function to resolve mDNS hostname to IP
bool resolveMDNSHost(const char* hostname) {
  Serial.printf("Resolving mDNS hostname: %s\n", hostname);
  
  // Remove .local suffix if present
  String host = String(hostname);
  if (host.endsWith(".local")) {
    host = host.substring(0, host.length() - 6);
  }
  
  // Try to resolve hostname
  IPAddress ip = MDNS.queryHost(host.c_str(), 5000);
  if (ip.toString() != "0.0.0.0") {
    mqtt_broker_ip = ip.toString();
    Serial.printf("Resolved %s to IP: %s\n", hostname, mqtt_broker_ip.c_str());
    return true;
  }
  
  Serial.printf("Failed to resolve %s\n", hostname);
  return false;
}

// State variables
bool wifi_configured = false;
bool mqtt_connected = false;
unsigned long last_mqtt_attempt = 0;
// Removed periodic status publishing - only publish on state changes

// Sensor states
bool sensor_states[4] = {false, false, false, false};
bool last_sensor_states[4] = {false, false, false, false};

// Turnout states
bool turnout_states[2] = {false, false};

// Signal states
int signal_state = 0; // 0=red, 1=yellow, 2=green

void displaySystemInfo() {
  Serial.println("=== System Information ===");
  Serial.println("Device: " + String(DEVICE_NAME));
  Serial.println("Firmware Version: " + String(FIRMWARE_VERSION));
  Serial.println("Free Sketch Space: " + String(ESP.getFreeSketchSpace()) + " bytes");
  Serial.println("Free Heap: " + String(ESP.getFreeHeap()) + " bytes");
  Serial.println("Flash Chip Size: " + String(ESP.getFlashChipSize()) + " bytes");
  Serial.println("Max OTA Size: " + String(ESP.getFreeSketchSpace() - 0x1000) + " bytes");
  Serial.println("SDK Version: " + String(ESP.getSdkVersion()));
  Serial.println("CPU Frequency: " + String(ESP.getCpuFreqMHz()) + " MHz");
  Serial.println("===============================");
}

void setup() {
  Serial.begin(SERIAL_BAUD_RATE);
  Serial.println("\n\n=== ESP32 JMRI MQTT Client ===");
  Serial.println("Firmware Version: " + String(FIRMWARE_VERSION));
  
  // Initialize WiFi early
  WiFi.mode(WIFI_MODE_APSTA);
  delay(100);  // Give WiFi time to initialize
  
  // Debug WiFi status
  Serial.println("=== WiFi Debug Info ===");
  Serial.print("WiFi Mode: ");
  switch(WiFi.getMode()) {
    case WIFI_MODE_NULL: Serial.println("NULL"); break;
    case WIFI_MODE_STA: Serial.println("STA"); break;
    case WIFI_MODE_AP: Serial.println("AP"); break;
    case WIFI_MODE_APSTA: Serial.println("AP+STA"); break;
    default: Serial.println("UNKNOWN"); break;
  }
  
  // Get and display raw MAC address
  uint8_t mac[6];
  WiFi.macAddress(mac);
  Serial.print("STA MAC Address: ");
  for (int i = 0; i < 6; i++) {
    Serial.printf("%02X", mac[i]);
    if (i < 5) Serial.print(":");
  }
  Serial.println();
  
  WiFi.softAPmacAddress(mac);
  Serial.print("AP MAC Address:  ");
  for (int i = 0; i < 6; i++) {
    Serial.printf("%02X", mac[i]);
    if (i < 5) Serial.print(":");
  }
  Serial.println();
  
  // Get unique ID and set SSID
  String uniqueId = getUniqueId();
  default_ssid = String(DEFAULT_SSID) + "_" + uniqueId;
  Serial.println("Device Unique ID: " + uniqueId);
  Serial.println("AP SSID will be: " + default_ssid);
  
  // Display system information
  displaySystemInfo();
  
  // Initialize pins
  initializePins();
  
  // Initialize SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("SPIFFS initialization failed");
  }
  
  // Initialize preferences
  preferences.begin("jmri_client", false);
  
  // Load saved WiFi credentials
  loadWiFiCredentials();
  
  // Load saved MQTT credentials
  loadMQTTCredentials();
  
  // Setup WiFi
  setupWiFi();
  
  // Wait for WiFi to stabilize
  if (WiFi.status() == WL_CONNECTED) {
    delay(2000);  // Give WiFi time to stabilize
    Serial.println("WiFi connected, attempting MQTT connection...");
    
    // Now setup MQTT with the loaded credentials
  setupMQTT();
    
    // Test broker connectivity before attempting connection
    testMQTTBrokerConnectivity();
    
    // Attempt initial MQTT connection
    Serial.println("Attempting initial MQTT connection...");
    mqttReconnect();
  } else {
    // If WiFi didn't connect, still setup MQTT for when it does connect
    setupMQTT();
  }
  
  // Setup web server for configuration
  setupWebServer();
  
  // Setup OTA
  setupOTA();
  
  Serial.println("Setup complete!");
}

void loop() {
  // Feed the watchdog to prevent resets
  yield();
  
  // Handle WiFi
  if (WiFi.status() != WL_CONNECTED) {
    handleWiFiReconnection();
  }
  
  // Handle MQTT
  if (WiFi.status() == WL_CONNECTED) {
    handleMQTT();
  }
  
  // Handle sensors
  handleSensors();
  
  // Handle web server
  web_server.handleClient();
  
  // Handle OTA
  ArduinoOTA.handle();
  
  // Only publish device status when states actually change
  // Removed periodic status publishing - JMRI only needs state change notifications
  
  // Connection status (keep minimal logging)
  static unsigned long last_connection_log = 0;
  if (millis() - last_connection_log > 60000) { // Log every minute
    if (WiFi.status() == WL_CONNECTED) {
      Serial.println("SSID: " + WiFi.SSID());
      Serial.println("IP: " + WiFi.localIP().toString());
      Serial.println("RSSI: " + String(WiFi.RSSI()) + " dBm");
    }
    Serial.println("MQTT Status: " + String(mqtt_connected ? "Connected" : "Disconnected"));
    if (mqtt_connected) {
      Serial.println("Broker: " + mqtt_broker_ip + ":" + String(mqtt_broker_port));
    }
    last_connection_log = millis();
  }
  
  delay(10);
}

void initializePins() {
  // Sensor pins (input with pull-up)
  pinMode(SENSOR_PIN_1, INPUT_PULLUP);
  pinMode(SENSOR_PIN_2, INPUT_PULLUP);
  pinMode(SENSOR_PIN_3, INPUT_PULLUP);
  pinMode(SENSOR_PIN_4, INPUT_PULLUP);
  
  // Turnout pins (output)
  pinMode(TURNOUT_PIN_1, OUTPUT);
  pinMode(TURNOUT_PIN_2, OUTPUT);
  digitalWrite(TURNOUT_PIN_1, LOW);
  digitalWrite(TURNOUT_PIN_2, LOW);
  
  // Signal pins (output)
  pinMode(SIGNAL_PIN_RED, OUTPUT);
  pinMode(SIGNAL_PIN_YELLOW, OUTPUT);
  pinMode(SIGNAL_PIN_GREEN, OUTPUT);
  digitalWrite(SIGNAL_PIN_RED, HIGH);   // Start with red
  digitalWrite(SIGNAL_PIN_YELLOW, LOW);
  digitalWrite(SIGNAL_PIN_GREEN, LOW);
  
  // Status LED
  pinMode(STATUS_LED, OUTPUT);
  digitalWrite(STATUS_LED, LOW);
}

void loadWiFiCredentials() {
  wifi_ssid = preferences.getString("wifi_ssid", "");
  wifi_password = preferences.getString("wifi_password", "");
  wifi_configured = (wifi_ssid.length() > 0);
  
  if (wifi_configured) {
    Serial.println("Loaded saved WiFi credentials for: " + wifi_ssid);
  } else {
    Serial.println("No saved WiFi credentials found");
  }
}

void loadMQTTCredentials() {
  Serial.println("=== Loading MQTT Credentials ===");
  
  // Load MQTT settings from preferences with defaults from config.h
  String broker = preferences.getString("mqtt_broker", MQTT_BROKER);
  int port = preferences.getInt("mqtt_port", MQTT_PORT);
  String client_id = preferences.getString("mqtt_client_id", MQTT_CLIENT_ID);
  String channel_name = preferences.getString("mqtt_channel_name", MQTT_CHANNEL_NAME);
  String topic_prefix = preferences.getString("mqtt_topic_prefix", MQTT_TOPIC_PREFIX);
  
  Serial.println("Loaded configuration:");
  Serial.println("  Broker: " + broker + (broker == MQTT_BROKER ? " (default)" : " (saved)"));
  Serial.println("  Port: " + String(port) + (port == MQTT_PORT ? " (default)" : " (saved)"));
  Serial.println("  Client ID: " + client_id + (client_id == MQTT_CLIENT_ID ? " (default)" : " (saved)"));
  Serial.println("  Channel Name: " + channel_name + (channel_name == MQTT_CHANNEL_NAME ? " (default)" : " (saved)"));
  Serial.println("  Topic Prefix: " + topic_prefix + (topic_prefix == MQTT_TOPIC_PREFIX ? " (default)" : " (saved)"));
  
  // Update MQTT client settings
  mqtt_broker_ip = broker;
  mqtt_broker_port = port;
  mqtt_channel_name = channel_name;
  
  // Update topic strings with channel name prefix
  String channel_prefix = mqtt_channel_name;
  if (!channel_prefix.startsWith("/")) {
    channel_prefix = "/" + channel_prefix;
  }
  mqtt_base_topic = channel_prefix + String(topic_prefix) + "/";
  mqtt_sensor_topic = mqtt_base_topic + "sensor/";
  mqtt_turnout_topic = mqtt_base_topic + "turnout/";
  mqtt_signal_topic = mqtt_base_topic + "signal/";
  mqtt_light_topic = mqtt_base_topic + "light/";
  mqtt_status_topic = mqtt_base_topic + "status/";
  
  Serial.println("Updated topic strings:");
  Serial.println("  Base: " + mqtt_base_topic);
  Serial.println("  Sensors: " + mqtt_sensor_topic);
  Serial.println("  Turnouts: " + mqtt_turnout_topic);
  Serial.println("  Signals: " + mqtt_signal_topic);
  Serial.println("  Status: " + mqtt_status_topic);
  
  Serial.println("===============================");
}

void setupWiFi() {
  if (wifi_configured) {
    // Try to connect to saved network
    Serial.println("=== WiFi Setup ===");
    Serial.println("Attempting to connect to saved WiFi network: " + wifi_ssid);
    Serial.println("WiFi mode: Station");
    
    WiFi.mode(WIFI_STA);
    WiFi.begin(wifi_ssid.c_str(), wifi_password.c_str());
    
    int attempts = 0;
    while (WiFi.status() != WL_CONNECTED && attempts < WIFI_MAX_ATTEMPTS) {
      delay(500);
      Serial.print(".");
      attempts++;
    }
    
    if (WiFi.status() == WL_CONNECTED) {
      Serial.println("\n✅ WiFi connected successfully!");
      Serial.println("SSID: " + WiFi.SSID());
      Serial.println("IP address: " + WiFi.localIP().toString());
      Serial.println("Gateway: " + WiFi.gatewayIP().toString());
      Serial.println("DNS: " + WiFi.dnsIP().toString());
      Serial.println("RSSI: " + String(WiFi.RSSI()) + " dBm");
      Serial.println("Channel: " + String(WiFi.channel()));
      digitalWrite(STATUS_LED, HIGH);
      Serial.println("=== WiFi Setup Complete ===");
    } else {
      Serial.println("\n❌ Failed to connect to saved WiFi");
      Serial.println("WiFi status: " + String(WiFi.status()));
      wifi_configured = false;
    }
  }
  
  if (!wifi_configured) {
    // Start configuration mode
    Serial.println("=== Starting WiFi Configuration Mode ===");
    WiFi.mode(WIFI_AP);
    WiFi.softAP(default_ssid.c_str(), default_password);
    Serial.println("AP SSID: " + String(default_ssid));
    Serial.println("AP Password: " + String(default_password));
    Serial.println("AP IP address: " + WiFi.softAPIP().toString());
    Serial.println("Connect to '" + String(default_ssid) + "' network with password '" + String(default_password) + "'");
    Serial.println("Then navigate to http://" + WiFi.softAPIP().toString() + " to configure");
    Serial.println("=== WiFi Configuration Mode Active ===");
  }
}

void setupMQTT() {
  Serial.println("=== Setting up MQTT ===");
  
  // Initialize mDNS if not already done
  if (!MDNS.begin("esp32-jmri-client")) {
    Serial.println("Error setting up mDNS responder");
  }
  
  // If we have a hostname, try to resolve it
  if (mqtt_broker_hostname.length() > 0) {
    if (resolveMDNSHost(mqtt_broker_hostname.c_str())) {
      Serial.println("Successfully resolved hostname to IP");
    } else {
      Serial.println("Warning: Could not resolve hostname, will try direct IP");
    }
  }
  
  Serial.println("Using configuration:");
  Serial.println("  Broker: " + (mqtt_broker_hostname.length() > 0 ? mqtt_broker_hostname : mqtt_broker_ip));
  Serial.println("  IP: " + mqtt_broker_ip);
  Serial.println("  Port: " + String(mqtt_broker_port));
  Serial.println("  Client ID: " + String(MQTT_CLIENT_ID));
  Serial.println("  Channel Name: " + mqtt_channel_name);
  Serial.println("  Topic Prefix: " + String(MQTT_TOPIC_PREFIX));
  
  // Update MQTT client settings
  mqtt_client.setServer(mqtt_broker_ip.c_str(), mqtt_broker_port);
  mqtt_client.setCallback(mqttCallback);
  mqtt_client.setKeepAlive(60);
  mqtt_client.setSocketTimeout(30);
  
  // Update topic strings with current values including channel name
  String channel_prefix = mqtt_channel_name;
  if (!channel_prefix.startsWith("/")) {
    channel_prefix = "/" + channel_prefix;
  }
  mqtt_base_topic = channel_prefix + String(MQTT_TOPIC_PREFIX) + "/";
  mqtt_sensor_topic = mqtt_base_topic + "sensor/";
  mqtt_turnout_topic = mqtt_base_topic + "turnout/";
  mqtt_signal_topic = mqtt_base_topic + "signal/";
  mqtt_light_topic = mqtt_base_topic + "light/";
  mqtt_status_topic = mqtt_base_topic + "status/";
  
  Serial.println("Final MQTT configuration:");
  Serial.println("  Broker: " + mqtt_broker_ip + ":" + String(mqtt_broker_port));
  Serial.println("  Base Topic: " + mqtt_base_topic);
  Serial.println("  Sensor Topic: " + mqtt_sensor_topic);
  Serial.println("  Turnout Topic: " + mqtt_turnout_topic);
  Serial.println("  Signal Topic: " + mqtt_signal_topic);
  Serial.println("  Status Topic: " + mqtt_status_topic);
  Serial.println("===============================");
}

void setupWebServer() {
  // Configuration page
  web_server.on("/", HTTP_GET, handleRoot);
  web_server.on("/configure", HTTP_POST, handleWiFiConfig);
  web_server.on("/configure_mqtt", HTTP_POST, handleMQTTConfig); // New handler for MQTT config
  web_server.on("/status", HTTP_GET, handleStatus);
  web_server.on("/control", HTTP_POST, handleDeviceControl); // Device control endpoint
  web_server.on("/restart", HTTP_POST, handleRestart);
  web_server.on("/reset", HTTP_POST, handleReset);
  web_server.on("/backup", HTTP_GET, handleBackup);
  web_server.on("/restore", HTTP_POST, []() {}, handleRestore);
  
  // Test endpoint for debugging
  web_server.on("/test", HTTP_GET, []() {
    web_server.send(200, "text/plain", "Web server is working! Firmware version: " + String(FIRMWARE_VERSION));
  });
  
  // OTA update page

  web_server.on("/doUpdate", HTTP_POST, handleDoUpdate, handleUpdateBody);
  
  // Add missing endpoints that the HTML expects
  web_server.on("/devices", HTTP_GET, handleDevices);
  web_server.on("/wifi", HTTP_POST, handleWiFiConfig);
  web_server.on("/mqtt", HTTP_POST, handleMQTTConfig);
  web_server.on("/config", HTTP_GET, handleConfig);
  web_server.on("/upload", HTTP_POST, handleDoUpdate, handleUpdateBody);
  
  web_server.begin();
  Serial.println("Web server started");
}

void setupOTA() {
  Serial.println("Setting up OTA...");
  
  ArduinoOTA.setHostname(DEVICE_NAME);
  ArduinoOTA.setPassword("admin");
  
  // Set OTA port (default is 3232)
  ArduinoOTA.setPort(3232);
  
  ArduinoOTA.onStart([]() {
    Serial.println("=== OTA Update Started ===");
    Serial.println("Disabling watchdog during update...");
    digitalWrite(STATUS_LED, LOW);
  });
  
  ArduinoOTA.onProgress([](unsigned int progress, unsigned int total) {
    Serial.printf("OTA Progress: %u%%\n", (progress / (total / 100)));
    // Feed watchdog during progress
    yield();
  });
  
  ArduinoOTA.onEnd([]() {
    Serial.println("=== OTA Update Completed ===");
    Serial.println("Update successful, restarting...");
    digitalWrite(STATUS_LED, HIGH);
  });
  
  ArduinoOTA.onError([](ota_error_t error) {
    Serial.printf("=== OTA Error: %u ===\n", error);
    Serial.println("Error details:");
    switch (error) {
      case OTA_AUTH_ERROR:
        Serial.println("Auth Failed");
        break;
      case OTA_BEGIN_ERROR:
        Serial.println("Begin Failed");
        break;
      case OTA_CONNECT_ERROR:
        Serial.println("Connect Failed");
        break;
      case OTA_RECEIVE_ERROR:
        Serial.println("Receive Failed");
        break;
      case OTA_END_ERROR:
        Serial.println("End Failed");
        break;
      default:
        Serial.println("Unknown Error");
        break;
    }
    digitalWrite(STATUS_LED, LOW);
  });
  
  ArduinoOTA.begin();
  Serial.println("OTA ready on port 3232");
  Serial.println("You can also use Arduino IDE or other OTA tools to update");
}

void handleWiFiReconnection() {
  static unsigned long last_reconnect_attempt = 0;
  unsigned long current_time = millis();
  
  if (current_time - last_reconnect_attempt > WIFI_RECONNECT_INTERVAL) { // Try every 30 seconds
    Serial.println("Attempting WiFi reconnection...");
    WiFi.reconnect();
    last_reconnect_attempt = current_time;
  }
}

void handleMQTT() {
  if (!mqtt_client.connected()) {
    if (millis() - last_mqtt_attempt > MQTT_RETRY_INTERVAL) {
      Serial.println("🔍 DEBUG: MQTT disconnected, calling mqttReconnect() from handleMQTT()");
      mqttReconnect();
      last_mqtt_attempt = millis();
    }
  } else {
    mqtt_client.loop();
  }
}

void testMQTTBrokerConnectivity() {
  Serial.println("=== Testing MQTT Broker Connectivity ===");
  Serial.println("Broker: " + mqtt_broker_ip + ":" + String(mqtt_broker_port));
  
  // Create a temporary WiFi client to test connectivity
  WiFiClient testClient;
  
  Serial.println("Attempting TCP connection to broker...");
  if (testClient.connect(mqtt_broker_ip.c_str(), mqtt_broker_port)) {
    Serial.println("✅ TCP connection to broker successful");
    Serial.println("Broker is reachable on the network");
    testClient.stop();
  } else {
    Serial.println("❌ TCP connection to broker failed");
    Serial.println("Broker may be unreachable or port may be blocked");
    Serial.println("Check:");
    Serial.println("  - Broker IP address is correct");
    Serial.println("  - Broker is running and listening on port " + String(mqtt_broker_port));
    Serial.println("  - Network firewall allows connections to this port");
    Serial.println("  - WiFi network can reach the broker subnet");
  }
  Serial.println("===============================");
}

void mqttReconnect() {
  Serial.println("🔍 DEBUG: mqttReconnect() called at " + String(millis()) + " ms");
  Serial.println("=== Attempting MQTT Connection ===");
  Serial.println("Broker: " + mqtt_broker_ip);
  Serial.println("Port: " + String(mqtt_broker_port));
  Serial.println("Client ID: " + String(MQTT_CLIENT_ID));
  Serial.println("WiFi Status: " + String(WiFi.status()));
  Serial.println("WiFi IP: " + WiFi.localIP().toString());
  
  if (mqtt_client.connect(MQTT_CLIENT_ID)) {
    Serial.println("✅ MQTT connected successfully!");
    mqtt_connected = true;
    
    // Subscribe to control topics (not status topics to avoid feedback loops)
    String turnout_topic = mqtt_turnout_topic + "+";
    String signal_topic = mqtt_signal_topic + "+";
    String sensor_topic = mqtt_sensor_topic + "+";
    
    Serial.println("Subscribing to turnout topic: " + turnout_topic);
    mqtt_client.subscribe(turnout_topic.c_str());
    
    Serial.println("Subscribing to signal topic: " + signal_topic);
    mqtt_client.subscribe(signal_topic.c_str());
    
    Serial.println("Subscribing to sensor topic: " + sensor_topic);
    mqtt_client.subscribe(sensor_topic.c_str());
    
    Serial.println("Subscriptions completed");
    
    // Request retained messages for initial state sync
    Serial.println("Requesting retained messages for state synchronization...");
    delay(1000); // Give broker time to send retained messages
    
    // Process retained messages multiple times to ensure we get them all
    for (int i = 0; i < 10; i++) {
      mqtt_client.loop();
      delay(100);
    }
    
    Serial.println("=== Current States After MQTT Sync ===");
    Serial.println("Turnout 1: " + String(turnout_states[0] ? "THROWN" : "CLOSED"));
    Serial.println("Turnout 2: " + String(turnout_states[1] ? "THROWN" : "CLOSED"));
    Serial.println("Signal: " + String((signal_state == 0) ? "RED" : (signal_state == 1) ? "YELLOW" : "GREEN"));
    Serial.println("=====================================");
    
    // Skip initial status publish - we now sync from retained messages
    // The ESP32 state is now controlled by JMRI via retained messages
    Serial.println("Skipping initial status publish - using retained message states");
    
    Serial.println("=== MQTT Setup Complete ===");
  } else {
    Serial.printf("❌ MQTT connection failed, rc=%d\n", mqtt_client.state());
    Serial.println("Error codes:");
    Serial.println("  -4: MQTT_CONNECTION_TIMEOUT");
    Serial.println("  -3: MQTT_CONNECTION_LOST");
    Serial.println("  -2: MQTT_CONNECT_FAILED");
    Serial.println("  -1: MQTT_DISCONNECTED");
    Serial.println("   0: MQTT_CONNECTED");
    Serial.println("   1: MQTT_CONNECT_BAD_PROTOCOL");
    Serial.println("   2: MQTT_CONNECT_BAD_CLIENT_ID");
    Serial.println("   3: MQTT_CONNECT_UNAVAILABLE");
    Serial.println("   4: MQTT_CONNECT_BAD_CREDENTIALS");
    Serial.println("   5: MQTT_CONNECT_UNAUTHORIZED");
    mqtt_connected = false;
  }
}

// Track our own recent publications to prevent feedback loops
struct RecentPublication {
  String topic;
  String payload;
  unsigned long timestamp;
};

RecentPublication recent_pubs[10];  // Track last 10 publications
int recent_pub_index = 0;

void trackPublication(String topic, String payload) {
  recent_pubs[recent_pub_index].topic = topic;
  recent_pubs[recent_pub_index].payload = payload;
  recent_pubs[recent_pub_index].timestamp = millis();
  recent_pub_index = (recent_pub_index + 1) % 10;
}

bool isOurOwnMessage(String topic, String payload) {
  unsigned long now = millis();
  for (int i = 0; i < 10; i++) {
    if (recent_pubs[i].topic == topic && 
        recent_pubs[i].payload == payload && 
        (now - recent_pubs[i].timestamp) < 2000) {  // Within 2 seconds
      return true;
    }
  }
  return false;
}

void mqttCallback(char* topic, byte* payload, unsigned int length) {
  String topic_str = String(topic);
  String payload_str = "";
  
  for (int i = 0; i < length; i++) {
    payload_str += (char)payload[i];
  }
  
  Serial.println("=== MQTT Message Received ===");
  Serial.println("  Topic: " + topic_str);
  Serial.println("  Payload: " + payload_str);
  Serial.println("  Length: " + String(length) + " bytes");
  Serial.println("  From Broker: " + mqtt_broker_ip + ":" + String(mqtt_broker_port));
  Serial.println("  Timestamp: " + String(millis()) + " ms");
  Serial.println("  Is Retained: " + String(length > 0 ? "Unknown" : "Unknown")); // MQTT lib doesn't expose retain flag
  
  // Check if this is our own message to prevent feedback loops
  // BUT: Always process messages during first 30 seconds (boot sync period)
  bool isBootSync = (millis() < 30000);
  if (!isBootSync && isOurOwnMessage(topic_str, payload_str)) {
    Serial.println("  🔄 Ignoring our own message to prevent feedback loop");
    Serial.println("================================");
    return;
  }
  
  if (isBootSync) {
    Serial.println("  🚀 Processing message during boot sync period");
  }
  
  // Ignore $SYS topics
  if (topic_str.startsWith("$SYS")) {
    Serial.println("  ℹ️ Ignoring $SYS topic");
    Serial.println("================================");
    return;
  }
  
  Serial.println("================================");
  
  // Handle turnout control - JMRI sends simple text commands
  if (topic_str.indexOf("/turnout/") > 0) {
    Serial.println("🎯 Processing turnout control message");
    handleTurnoutControl(topic_str, payload_str);
  }
  
  // Handle signal control - JMRI sends simple text commands
  if (topic_str.indexOf("/signal/") > 0) {
    Serial.println("🎯 Processing signal control message");
    handleSignalControl(topic_str, payload_str);
  }
  
  // Handle sensor truth verification - respond with actual state if different
  if (topic_str.indexOf("/sensor/") > 0) {
    Serial.println("🎯 Processing sensor verification message");
    Serial.println("  Sensor topic detected: " + topic_str);
    Serial.println("  Payload: " + payload_str);
    Serial.println("  Current sensor states:");
    for (int i = 0; i < 4; i++) {
      Serial.println("    Sensor " + String(i+1) + ": " + String(sensor_states[i] ? "ACTIVE" : "INACTIVE"));
    }
    handleSensorVerification(topic_str, payload_str);
  }
}

void handleTurnoutControl(String topic, String payload) {
  // Extract turnout number from topic (e.g., "track/turnout/1" -> turnout 1)
  int turnout_num = 0;
  
  // Find the last number in the topic
  int lastSlash = topic.lastIndexOf('/');
  if (lastSlash > 0) {
    String turnout_str = topic.substring(lastSlash + 1);
    turnout_num = turnout_str.toInt() - 1;  // Convert to 0-based index
  }
  
  // Validate turnout number
  if (turnout_num < 0 || turnout_num > 1) {
    Serial.println("❌ Error: Invalid turnout number: " + String(turnout_num + 1));
    Serial.println("=====================");
    return;
  }
  
  Serial.println("=== Turnout Control ===");
  Serial.println("Turnout: " + String(turnout_num + 1));
  Serial.println("Topic: " + topic);
  Serial.println("Payload: " + payload);
  Serial.println("Current state: " + String(turnout_states[turnout_num] ? "THROWN" : "CLOSED"));
  
  bool state_changed = false;
  
  if (payload == "THROWN") {
    Serial.println("🎯 Requested position: THROWN");
    
    if (turnout_states[turnout_num] != true) {  // Only change if state is different
      state_changed = true;
    
    if (turnout_num == 0) {
        digitalWrite(TURNOUT_PIN_1, HIGH);
        turnout_states[0] = true;
        Serial.println("✅ Turnout 1 pin " + String(TURNOUT_PIN_1) + " set to HIGH");
    } else if (turnout_num == 1) {
        digitalWrite(TURNOUT_PIN_2, HIGH);
        turnout_states[1] = true;
        Serial.println("✅ Turnout 2 pin " + String(TURNOUT_PIN_2) + " set to HIGH");
      }
      
      Serial.println("✅ Turnout " + String(turnout_num + 1) + " moved to THROWN");
    } else {
      Serial.println("ℹ️ Turnout " + String(turnout_num + 1) + " already in THROWN position");
    }
    
  } else if (payload == "CLOSED") {
    Serial.println("🎯 Requested position: CLOSED");
    
    if (turnout_states[turnout_num] != false) {  // Only change if state is different
      state_changed = true;
      
      if (turnout_num == 0) {
        digitalWrite(TURNOUT_PIN_1, LOW);
        turnout_states[0] = false;
        Serial.println("✅ Turnout 1 pin " + String(TURNOUT_PIN_1) + " set to LOW");
      } else if (turnout_num == 1) {
        digitalWrite(TURNOUT_PIN_2, LOW);
        turnout_states[1] = false;
        Serial.println("✅ Turnout 2 pin " + String(TURNOUT_PIN_2) + " set to LOW");
      }
      
      Serial.println("✅ Turnout " + String(turnout_num + 1) + " moved to CLOSED");
    } else {
      Serial.println("ℹ️ Turnout " + String(turnout_num + 1) + " already in CLOSED position");
    }
    
  } else {
    Serial.println("❌ Unknown position specified in turnout control message: " + payload);
    Serial.println("=====================");
    return;
  }
  
  // Don't publish when state changes due to MQTT commands
  // JMRI already knows it sent the command, no need to echo back
  if (state_changed) {
    Serial.println("🔄 State changed due to MQTT command, but not publishing back to JMRI");
    Serial.println("ℹ️ JMRI already knows it sent this command - no echo needed");
  } else {
    Serial.println("ℹ️ No state change, already in requested state");
  }
  
  Serial.println("=====================");
}

void handleSignalControl(String topic, String payload) {
  Serial.println("=== Signal Control ===");
  Serial.println("Topic: " + topic);
  Serial.println("Payload: " + payload);
  
  bool state_changed = false;
  
  if (payload == "RED") {
    Serial.println("Requested aspect: RED");
    Serial.println("Current aspect: " + String(signal_state == 0 ? "RED" : signal_state == 1 ? "YELLOW" : "GREEN"));
    
    if (signal_state != 0) {
      state_changed = true;
      signal_state = 0;
      digitalWrite(SIGNAL_PIN_RED, HIGH);
      digitalWrite(SIGNAL_PIN_YELLOW, LOW);
      digitalWrite(SIGNAL_PIN_GREEN, LOW);
      Serial.println("Signal pin " + String(SIGNAL_PIN_RED) + " set to HIGH (RED)");
      Serial.println("Signal pin " + String(SIGNAL_PIN_YELLOW) + " set to LOW");
      Serial.println("Signal pin " + String(SIGNAL_PIN_GREEN) + " set to LOW");
      Serial.println("✅ Signal changed to RED");
    } else {
      Serial.println("ℹ️ Signal already in RED state");
    }
    
  } else if (payload == "YELLOW") {
    Serial.println("Requested aspect: YELLOW");
    Serial.println("Current aspect: " + String(signal_state == 0 ? "RED" : signal_state == 1 ? "YELLOW" : "GREEN"));
    
    if (signal_state != 1) {
      state_changed = true;
      signal_state = 1;
      digitalWrite(SIGNAL_PIN_RED, LOW);
      digitalWrite(SIGNAL_PIN_YELLOW, HIGH);
      digitalWrite(SIGNAL_PIN_GREEN, LOW);
      Serial.println("Signal pin " + String(SIGNAL_PIN_RED) + " set to LOW");
      Serial.println("Signal pin " + String(SIGNAL_PIN_YELLOW) + " set to HIGH (YELLOW)");
      Serial.println("Signal pin " + String(SIGNAL_PIN_GREEN) + " set to LOW");
      Serial.println("✅ Signal changed to YELLOW");
    } else {
      Serial.println("ℹ️ Signal already in YELLOW state");
    }
    
  } else if (payload == "GREEN") {
    Serial.println("Requested aspect: GREEN");
    Serial.println("Current aspect: " + String(signal_state == 0 ? "RED" : signal_state == 1 ? "YELLOW" : "GREEN"));
    
    if (signal_state != 2) {
      state_changed = true;
      signal_state = 2;
      digitalWrite(SIGNAL_PIN_RED, LOW);
      digitalWrite(SIGNAL_PIN_YELLOW, LOW);
      digitalWrite(SIGNAL_PIN_GREEN, HIGH);
      Serial.println("Signal pin " + String(SIGNAL_PIN_RED) + " set to LOW");
      Serial.println("Signal pin " + String(SIGNAL_PIN_YELLOW) + " set to LOW");
      Serial.println("Signal pin " + String(SIGNAL_PIN_GREEN) + " set to HIGH (GREEN)");
      Serial.println("✅ Signal changed to GREEN");
    } else {
      Serial.println("ℹ️ Signal already in GREEN state");
    }
    
  } else {
    Serial.println("❌ Unknown aspect specified in signal control message: " + payload);
    Serial.println("===================");
    return;
  }
  
  // Don't publish when state changes due to MQTT commands
  // JMRI already knows it sent the command, no need to echo back
  if (state_changed) {
    Serial.println("🔄 State changed due to MQTT command, but not publishing back to JMRI");
    Serial.println("ℹ️ JMRI already knows it sent this command - no echo needed");
  } else {
    Serial.println("ℹ️ No state change, already in requested state");
  }
  
  Serial.println("===================");
}

void handleSensorVerification(String topic, String payload) {
  Serial.println("=== Sensor Verification START ===");
  
  // Extract sensor number from topic (e.g., "trains/track/sensor/1" -> sensor 1)
  int sensor_num = 0;
  
  // Find the last number in the topic
  int lastSlash = topic.lastIndexOf('/');
  if (lastSlash > 0) {
    String sensor_str = topic.substring(lastSlash + 1);
    sensor_num = sensor_str.toInt();
    Serial.println("  Extracted sensor number: " + String(sensor_num));
  }
  
  // Validate sensor number
  if (sensor_num < 1 || sensor_num > 4) {
    Serial.println("❌ Error: Invalid sensor number: " + String(sensor_num));
    Serial.println("=====================");
    return;
  }
  
  String actual_state = sensor_states[sensor_num - 1] ? "ACTIVE" : "INACTIVE";
  
  Serial.println("=== Sensor Verification ===");
  Serial.println("Sensor: " + String(sensor_num));
  Serial.println("Topic: " + topic);
  Serial.println("JMRI expects: " + payload);
  Serial.println("Actual physical state: " + actual_state);
  Serial.println("Physical pin state: " + String(digitalRead(sensor_num == 1 ? SENSOR_PIN_1 : sensor_num == 2 ? SENSOR_PIN_2 : sensor_num == 3 ? SENSOR_PIN_3 : SENSOR_PIN_4)));
  
  // Only publish if JMRI's expectation differs from reality
  if (payload != actual_state) {
    Serial.println("⚠️ MISMATCH: JMRI expects '" + payload + "' but sensor is actually '" + actual_state + "'");
    Serial.println("📤 Publishing correct sensor state to update JMRI...");
    publishSensorStatus(sensor_num);
  } else {
    Serial.println("✅ JMRI state matches actual sensor state - no publish needed");
  }
  
  Serial.println("=== Sensor Verification END ===");
}

void handleSensors() {
  // Read sensor states
  sensor_states[0] = !digitalRead(SENSOR_PIN_1); // Inverted due to pull-up
  sensor_states[1] = !digitalRead(SENSOR_PIN_2);
  sensor_states[2] = !digitalRead(SENSOR_PIN_3);
  sensor_states[3] = !digitalRead(SENSOR_PIN_4);
  
  // Check for changes and publish updates
  for (int i = 0; i < 4; i++) {
    if (sensor_states[i] != last_sensor_states[i]) {
      Serial.println("=== Sensor State Change ===");
      Serial.println("Sensor " + String(i + 1) + " changed from " + 
                    (last_sensor_states[i] ? "ACTIVE" : "INACTIVE") + 
                    " to " + (sensor_states[i] ? "ACTIVE" : "INACTIVE"));
      Serial.println("Pin: " + String(i == 0 ? SENSOR_PIN_1 : i == 1 ? SENSOR_PIN_2 : i == 2 ? SENSOR_PIN_3 : SENSOR_PIN_4));
      Serial.println("==========================");
      
      publishSensorStatus(i + 1);
      last_sensor_states[i] = sensor_states[i];
    }
  }
}

void publishSensorStatus(int sensor_num) {
  if (!mqtt_connected) return;
  
  // Publish to same topic as commands - filtering prevents feedback loops
  String state = sensor_states[sensor_num - 1] ? "ACTIVE" : "INACTIVE";
  String topic = mqtt_sensor_topic + String(sensor_num);
  
  // Track this publication to prevent feedback loops
  trackPublication(topic, state);
  
  mqtt_client.publish(topic.c_str(), state.c_str(), true); // Retained message
  
  Serial.println("Published sensor " + String(sensor_num) + " status: " + state + " to topic: " + topic);
}

void publishTurnoutStatus(int turnout_num) {
  if (!mqtt_connected) return;
  
  // Publish to same topic as commands - filtering prevents feedback loops
  String position = turnout_states[turnout_num - 1] ? "THROWN" : "CLOSED";
  String topic = mqtt_turnout_topic + String(turnout_num);
  
  // Debug: show the source of this publication
  Serial.println("🔍 DEBUG: Publishing turnout " + String(turnout_num) + " status");
  Serial.println("   Internal state: " + String(turnout_states[turnout_num - 1] ? "true (THROWN)" : "false (CLOSED)"));
  Serial.println("   Pin state: " + String(digitalRead(turnout_num == 1 ? TURNOUT_PIN_1 : TURNOUT_PIN_2) ? "HIGH (THROWN)" : "LOW (CLOSED)"));
  
  // Track this publication to prevent feedback loops
  trackPublication(topic, position);
  
  mqtt_client.publish(topic.c_str(), position.c_str(), true); // Retained message
  
  Serial.println("Published turnout " + String(turnout_num) + " status: " + position + " to topic: " + topic);
}

void publishSignalStatus() {
  if (!mqtt_connected) return;
  
  // Publish to same topic as commands - filtering prevents feedback loops
  String aspect = (signal_state == 0) ? "RED" : (signal_state == 1) ? "YELLOW" : "GREEN";
  String topic = mqtt_signal_topic + "1";
  
  // Track this publication to prevent feedback loops
  trackPublication(topic, aspect);
  
  mqtt_client.publish(topic.c_str(), aspect.c_str(), true); // Retained message
  
  Serial.println("Published signal status: " + aspect + " to topic: " + topic);
}

void publishInitialStatus() {
  if (!mqtt_connected) return;
  
  Serial.println("=== Publishing Initial Status for All Devices to JMRI ===");
  Serial.println("🔍 DEBUG: publishInitialStatus() called");
  
  // Publish individual sensor statuses
  for (int i = 1; i <= 4; i++) {
    publishSensorStatus(i);
    delay(100);  // Small delay between publishes
  }
  
  // Publish individual turnout statuses
  for (int i = 1; i <= 2; i++) {
    Serial.println("🔍 DEBUG: publishTurnoutStatus() called from publishInitialStatus()");
    publishTurnoutStatus(i);
    delay(100);  // Small delay between publishes
  }
  
  // Publish signal status
  publishSignalStatus();
  
  Serial.println("=== Initial Device States Published to JMRI ===");
}

// Removed publishAllDeviceStatus() - only publish when states actually change

// Removed publishStatus() and updateStatus() functions
// MQTT status is now only published when device states actually change

// Web server handlers
void handleRoot() {
  String html = getMainPageHTML();
  
  // Substitute placeholders with actual values
  html.replace("CLIENT_ID_PLACEHOLDER", String(MQTT_CLIENT_ID));
  html.replace("IP_ADDRESS_PLACEHOLDER", WiFi.localIP().toString());
  html.replace("WIFI_STATUS_PLACEHOLDER", WiFi.status() == WL_CONNECTED ? 
    "<span class=\"status-badge status-connected\">WiFi Connected</span>" : 
    "<span class=\"status-badge status-disconnected\">WiFi Disconnected</span>");
  html.replace("MQTT_BROKER_PLACEHOLDER", mqtt_broker_ip + ":" + String(mqtt_broker_port));
  html.replace("MQTT_STATUS_PLACEHOLDER", mqtt_client.connected() ? 
    "<span class=\"status-badge status-connected\">Connected</span>" : 
    "<span class=\"status-badge status-disconnected\">Disconnected</span>");
  html.replace("WIFI_SSID_PLACEHOLDER", wifi_ssid);
  html.replace("WIFI_PASSWORD_PLACEHOLDER", wifi_password);
  html.replace("MQTT_BROKER_PLACEHOLDER", mqtt_broker_ip);
  html.replace("MQTT_PORT_PLACEHOLDER", String(mqtt_broker_port));
  html.replace("MQTT_CLIENT_ID_PLACEHOLDER", String(MQTT_CLIENT_ID));
  html.replace("MQTT_CHANNEL_NAME_PLACEHOLDER", mqtt_channel_name);
  html.replace("MQTT_TOPIC_PREFIX_PLACEHOLDER", String(MQTT_TOPIC_PREFIX));
  html.replace("FIRMWARE_VERSION_PLACEHOLDER", String(FIRMWARE_VERSION));
  
  web_server.send(200, "text/html", html);
}

// Handler for /devices endpoint - returns device table HTML
void handleDevices() {
  web_server.send(200, "text/html", getDeviceTableHTML());
}

// Handler for /config endpoint - returns current configuration as JSON
void handleConfig() {
  DynamicJsonDocument doc(512);
  
  doc["wifi_ssid"] = wifi_ssid;
  doc["mqtt_broker"] = mqtt_broker_ip;
  doc["mqtt_port"] = mqtt_broker_port;
  doc["mqtt_client_id"] = String(MQTT_CLIENT_ID);
  doc["mqtt_channel_name"] = mqtt_channel_name;
  doc["mqtt_topic_prefix"] = String(MQTT_TOPIC_PREFIX);
  
  String response;
  serializeJson(doc, response);
  web_server.send(200, "application/json", response);
}

void handleWiFiConfig() {
  if (web_server.hasArg("ssid") && web_server.hasArg("password")) {
    String new_ssid = web_server.arg("ssid");
    String new_password = web_server.arg("password");
    
    // Save to preferences
    preferences.putString("wifi_ssid", new_ssid);
    preferences.putString("wifi_password", new_password);
    
    wifi_ssid = new_ssid;
    wifi_password = new_password;
    wifi_configured = true;
    
    // Restart WiFi connection
    WiFi.disconnect();
    delay(1000);
    WiFi.begin(wifi_ssid.c_str(), wifi_password.c_str());
    
    web_server.send(200, "text/plain", "WiFi configuration saved. Device will connect to the new network.");
  } else {
    web_server.send(400, "text/plain", "Missing SSID or password");
  }
}

void handleMQTTConfig() {
  if (web_server.hasArg("mqtt_broker") && web_server.hasArg("mqtt_port") && web_server.hasArg("mqtt_client_id") && web_server.hasArg("mqtt_channel_name") && web_server.hasArg("mqtt_topic_prefix")) {
    String new_broker = web_server.arg("mqtt_broker");
    int new_port = web_server.arg("mqtt_port").toInt();
    String new_client_id = web_server.arg("mqtt_client_id");
    String new_channel_name = web_server.arg("mqtt_channel_name");
    String new_topic_prefix = web_server.arg("mqtt_topic_prefix");

    Serial.println("=== MQTT Configuration Update ===");
    Serial.println("New Broker: " + new_broker);
    Serial.println("New Port: " + String(new_port));
    Serial.println("New Client ID: " + new_client_id);
    Serial.println("New Channel Name: " + new_channel_name);
    Serial.println("New Topic Prefix: " + new_topic_prefix);

    // Save to preferences
    preferences.putString("mqtt_broker", new_broker);
    preferences.putInt("mqtt_port", new_port);
    preferences.putString("mqtt_client_id", new_client_id);
    preferences.putString("mqtt_channel_name", new_channel_name);
    preferences.putString("mqtt_topic_prefix", new_topic_prefix);

    // Update global variables
    mqtt_broker_ip = new_broker;
    mqtt_broker_port = new_port;
    mqtt_channel_name = new_channel_name;

    // Update MQTT client settings
    mqtt_client.disconnect();
    mqtt_client.setServer(new_broker.c_str(), new_port);
    
    // Update topic strings with channel name prefix
    String channel_prefix = mqtt_channel_name;
    if (!channel_prefix.startsWith("/")) {
      channel_prefix = "/" + channel_prefix;
    }
    mqtt_base_topic = channel_prefix + String(new_topic_prefix) + "/";
    mqtt_sensor_topic = mqtt_base_topic + "sensor/";
    mqtt_turnout_topic = mqtt_base_topic + "turnout/";
    mqtt_signal_topic = mqtt_base_topic + "signal/";
    mqtt_light_topic = mqtt_base_topic + "light/";
    mqtt_status_topic = mqtt_base_topic + "status/";

    Serial.println("Updated topic strings:");
    Serial.println("  Base: " + mqtt_base_topic);
    Serial.println("  Sensors: " + mqtt_sensor_topic);
    Serial.println("  Turnouts: " + mqtt_turnout_topic);
    Serial.println("  Signals: " + mqtt_signal_topic);
    Serial.println("  Status: " + mqtt_status_topic);

    // Disconnect current MQTT connection
    Serial.println("Disconnecting current MQTT connection...");
    mqtt_client.disconnect();
    mqtt_connected = false;
    delay(1000);
    
    // Try to reconnect with new settings
    Serial.println("Attempting to reconnect with new MQTT settings...");
    if (mqtt_client.connect(new_client_id.c_str())) {
      Serial.println("✅ MQTT reconnected with new configuration successfully!");
      mqtt_connected = true;
      
      // Resubscribe to control topics
      String turnout_topic = mqtt_turnout_topic + "+";
      String signal_topic = mqtt_signal_topic + "+";
      String sensor_topic = mqtt_sensor_topic + "+";
      
      Serial.println("Resubscribing to turnout topic: " + turnout_topic);
      mqtt_client.subscribe(turnout_topic.c_str());
      
      Serial.println("Resubscribing to signal topic: " + signal_topic);
      mqtt_client.subscribe(signal_topic.c_str());
      
      Serial.println("Resubscribing to sensor topic: " + sensor_topic);
      mqtt_client.subscribe(sensor_topic.c_str());
      
      // Skip republishing status on config changes - JMRI already knows current states
      Serial.println("Skipping status republish (no state changes)");
      
      Serial.println("=== MQTT Reconfiguration Complete ===");
    } else {
      Serial.println("❌ Failed to reconnect to MQTT with new configuration");
      Serial.printf("Error code: %d\n", mqtt_client.state());
      mqtt_connected = false;
    }

    web_server.send(200, "text/plain", "MQTT configuration saved. Device will reconnect to MQTT broker.");
  } else {
    web_server.send(400, "text/plain", "Missing MQTT configuration parameters (broker, port, client_id, channel_name, or topic_prefix)");
  }
}

void handleStatus() {
  DynamicJsonDocument doc(512);
  doc["device"] = DEVICE_NAME;
  doc["version"] = FIRMWARE_VERSION;
  doc["wifi_connected"] = (WiFi.status() == WL_CONNECTED);
  doc["wifi_ssid"] = wifi_ssid;
  doc["ip_address"] = WiFi.localIP().toString();
  doc["mqtt_connected"] = mqtt_connected;
  
  // Add MQTT configuration info
  doc["mqtt_broker"] = preferences.getString("mqtt_broker", MQTT_BROKER);
  doc["mqtt_port"] = preferences.getInt("mqtt_port", MQTT_PORT);
  doc["mqtt_client_id"] = preferences.getString("mqtt_client_id", MQTT_CLIENT_ID);
  doc["mqtt_channel_name"] = preferences.getString("mqtt_channel_name", MQTT_CHANNEL_NAME);
  doc["mqtt_topic_prefix"] = preferences.getString("mqtt_topic_prefix", MQTT_TOPIC_PREFIX);
  
  doc["uptime"] = millis();
  
  // Add current device states
  JsonArray sensor_states_array = doc.createNestedArray("sensor_states");
  for (int i = 0; i < 4; i++) {
    JsonObject sensor = sensor_states_array.createNestedObject();
    sensor["number"] = i + 1;
    sensor["state"] = sensor_states[i] ? "ACTIVE" : "INACTIVE";
  }
  
  JsonArray turnout_states_array = doc.createNestedArray("turnout_states");
  for (int i = 0; i < 2; i++) {
    JsonObject turnout = turnout_states_array.createNestedObject();
    turnout["number"] = i + 1;
    turnout["position"] = turnout_states[i] ? "THROWN" : "CLOSED";
  }
  
  JsonObject signal = doc.createNestedObject("signal_state");
  signal["number"] = 1;
  signal["aspect"] = (signal_state == 0) ? "RED" : (signal_state == 1) ? "YELLOW" : "GREEN";
  
  String json_string;
  serializeJsonPretty(doc, json_string);  // Use pretty formatting
  
  web_server.send(200, "application/json", json_string);
}

void handleDeviceControl() {
  // Check for required parameters
  if (!web_server.hasArg("type") || !web_server.hasArg("number") || !web_server.hasArg("action")) {
    web_server.send(400, "text/plain", "Missing required parameters");
    return;
  }

  String type = web_server.arg("type");
  int number = web_server.arg("number").toInt();
  String action = web_server.arg("action");

  if (type == "turnout") {
    if (number >= 1 && number <= 2) {
      bool new_state = (action == "THROWN");
      if (number == 1) {
        digitalWrite(TURNOUT_PIN_1, new_state ? HIGH : LOW);
        turnout_states[0] = new_state;
      } else {
        digitalWrite(TURNOUT_PIN_2, new_state ? HIGH : LOW);
        turnout_states[1] = new_state;
      }
      publishTurnoutStatus(number);
    }
  } else if (type == "signal" && number == 1) {
    int new_state = (action == "RED") ? 0 : (action == "YELLOW") ? 1 : 2;
    signal_state = new_state;
    digitalWrite(SIGNAL_PIN_RED, (new_state == 0) ? HIGH : LOW);
    digitalWrite(SIGNAL_PIN_YELLOW, (new_state == 1) ? HIGH : LOW);
    digitalWrite(SIGNAL_PIN_GREEN, (new_state == 2) ? HIGH : LOW);
    publishSignalStatus();
  }
  
  // Redirect back to main page
  web_server.sendHeader("Location", "/");
  web_server.send(302, "text/plain", "Redirecting...");
}

void handleRestart() {
  web_server.send(200, "text/plain", "Device restarting...");
  delay(1000);
  ESP.restart();
}

void handleReset() {
  Serial.println("=== FACTORY RESET REQUESTED ===");
  web_server.send(200, "text/plain", "Clearing all saved variables and restarting...");
  
  // Clear all stored preferences
  preferences.clear();
  Serial.println("All preferences cleared");
  
  // Give a moment for the response to be sent
  delay(2000);
  
  Serial.println("Restarting with factory defaults...");
  ESP.restart();
}



void handleDoUpdate() {
  web_server.sendHeader("Connection", "close");
  
  if (Update.hasError()) {
    String error_msg = "Update failed: " + String(Update.errorString());
    Serial.println(error_msg);
    web_server.send(500, "text/plain", error_msg);
  } else {
    Serial.println("Update successful, restarting device...");
    web_server.send(200, "text/plain", "Update successful! Device will restart in 3 seconds...");
    delay(3000);
    ESP.restart();
  }
}

// Static variable to track if update has been initialized
static bool updateInitialized = false;

void handleUpdateBody() {
  HTTPUpload& upload = web_server.upload();
  
  if (upload.status == UPLOAD_FILE_START) {
    Serial.println("=== OTA Update Started ===");
    Serial.println("File name: " + upload.filename);
    Serial.println("Upload status: " + String(upload.status));
    
    // Check if we have enough free space
    size_t freeSpace = ESP.getFreeSketchSpace();
    Serial.println("Free sketch space: " + String(freeSpace) + " bytes");
    
    if (freeSpace < 100000) {  // Less than 100KB free
      Serial.println("❌ Error: Insufficient free space for update");
                return;
            }
            
    // Debug upload information
    Serial.println("Upload total size: " + String(upload.totalSize) + " bytes");
    Serial.println("Upload current size: " + String(upload.currentSize) + " bytes");
    
    Serial.println("Starting OTA update...");
    
    // Reset initialization flag
    updateInitialized = false;
    
    // Don't call Update.begin() here - wait for first write chunk to determine size
    Serial.println("✅ Upload started - waiting for first chunk to determine size...");
    
  } else if (upload.status == UPLOAD_FILE_WRITE) {
    if (upload.buf == nullptr) {
      Serial.println("❌ Error: Upload buffer is null");
      return;
    }
    
    // Initialize Update library on first write chunk
    if (!updateInitialized) {
      Serial.println("=== First Write Chunk ===");
      Serial.println("Chunk size: " + String(upload.currentSize) + " bytes");
      
      // Debug: Check first few bytes of the chunk for firmware header
      Serial.print("First chunk header bytes: ");
      for (int i = 0; i < min(16, (int)upload.currentSize); i++) {
        Serial.printf("%02X ", upload.buf[i]);
      }
      Serial.println();
      
      // Use maximum available space and let Update library determine actual size from firmware
      size_t maxUpdateSize = (ESP.getFreeSketchSpace() - 0x1000) & 0xFFFFF000;
      Serial.println("Max update size: " + String(maxUpdateSize) + " bytes");
      
      if (!Update.begin(maxUpdateSize, U_FLASH)) {
        Serial.println("❌ Error: Update.begin() failed");
        Serial.println("Update error: " + String(Update.getError()));
        Update.printError(Serial);
        return;
      }
      
      updateInitialized = true;
      Serial.println("✅ Update initialized successfully");
      Serial.println("Update size after begin: " + String(Update.size()) + " bytes");
    }
    
    size_t written = Update.write(upload.buf, upload.currentSize);
    if (written != upload.currentSize) {
      Serial.println("❌ Error: Update.write() failed");
      Serial.println("Expected: " + String(upload.currentSize) + " bytes, Written: " + String(written) + " bytes");
      Serial.println("Update error: " + String(Update.getError()));
      Serial.println("Current progress: " + String(Update.progress()) + " bytes");
      Update.printError(Serial);
    return;
  }
  
    // Calculate progress
    if (Update.size() > 0) {
      size_t progress = (Update.progress() * 100) / Update.size();
      Serial.println("📤 Chunk written: " + String(upload.currentSize) + " bytes");
      Serial.println("📊 Progress: " + String(progress) + "% (" + String(Update.progress()) + "/" + String(Update.size()) + ")");
    }
    
  } else if (upload.status == UPLOAD_FILE_END) {
    Serial.println("=== Upload File End ===");
    Serial.println("Total bytes received: " + String(Update.progress()));
    
    // Reset initialization flag for next upload
    updateInitialized = false;
    
    if (Update.end(true)) {  // true = set new sketch as boot partition
      Serial.println("✅ Update completed successfully!");
      Serial.println("Final size: " + String(Update.size()) + " bytes");
      
      if (Update.isFinished()) {
        Serial.println("✅ Update is finished and verified");
        Serial.println("🔄 Restarting device in 3 seconds...");
        delay(3000);
        ESP.restart();
    } else {
        Serial.println("❌ Update not finished properly");
    }
      
  } else {
      Serial.println("❌ Error: Update.end() failed");
      Serial.println("Update error: " + String(Update.getError()));
      Update.printError(Serial);
    }
    
    // Check for any remaining errors
    if (Update.hasError()) {
      Serial.println("❌ Final verification failed");
      Serial.println("Error: " + String(Update.getError()));
      Update.printError(Serial);
    }
  }
}

void handleBackup() {
  // Create a JSON document to store all preferences
  DynamicJsonDocument doc(1024);
  
  // Add WiFi settings
  doc["wifi_ssid"] = preferences.getString("wifi_ssid", "");
  doc["wifi_password"] = preferences.getString("wifi_password", "");
  
  // Add MQTT settings
  doc["mqtt_broker"] = preferences.getString("mqtt_broker", "");
  doc["mqtt_port"] = preferences.getInt("mqtt_port", 0);
  doc["mqtt_client_id"] = preferences.getString("mqtt_client_id", "");
  doc["mqtt_channel_name"] = preferences.getString("mqtt_channel_name", "");
  doc["mqtt_topic_prefix"] = preferences.getString("mqtt_topic_prefix", "");
  
  // Add device configuration
  doc["device_name"] = DEVICE_NAME;
  doc["firmware_version"] = FIRMWARE_VERSION;
  
  // Add timestamp
  doc["backup_timestamp"] = String(millis());
  
  // Serialize to JSON string
  String jsonStr;
  serializeJsonPretty(doc, jsonStr);
  
  // Generate filename with client ID and timestamp
  String filename = String(MQTT_CLIENT_ID) + "_backup_" + String(millis()) + ".json";
  
  // Send as file download
  web_server.sendHeader("Content-Disposition", "attachment; filename=" + filename);
  web_server.send(200, "application/json", jsonStr);
}

void handleRestore() {
  HTTPUpload& upload = web_server.upload();
  
  if (upload.status == UPLOAD_FILE_START) {
    Serial.println("=== Starting config restore ===");
  } else if (upload.status == UPLOAD_FILE_WRITE) {
    // Parse JSON from uploaded file
    DynamicJsonDocument doc(1024);
    DeserializationError error = deserializeJson(doc, (char*)upload.buf);
    
    if (error) {
      Serial.println("Failed to parse config file");
      return;
    }
    
    // Restore WiFi settings
    if (doc.containsKey("wifi_ssid")) {
      preferences.putString("wifi_ssid", doc["wifi_ssid"].as<String>());
    }
    if (doc.containsKey("wifi_password")) {
      preferences.putString("wifi_password", doc["wifi_password"].as<String>());
    }
    
    // Restore MQTT settings
    if (doc.containsKey("mqtt_broker")) {
      preferences.putString("mqtt_broker", doc["mqtt_broker"].as<String>());
    }
    if (doc.containsKey("mqtt_port")) {
      preferences.putInt("mqtt_port", doc["mqtt_port"].as<int>());
    }
    if (doc.containsKey("mqtt_client_id")) {
      preferences.putString("mqtt_client_id", doc["mqtt_client_id"].as<String>());
    }
    if (doc.containsKey("mqtt_channel_name")) {
      preferences.putString("mqtt_channel_name", doc["mqtt_channel_name"].as<String>());
    }
    if (doc.containsKey("mqtt_topic_prefix")) {
      preferences.putString("mqtt_topic_prefix", doc["mqtt_topic_prefix"].as<String>());
    }
  } else if (upload.status == UPLOAD_FILE_END) {
    Serial.println("Config restore complete");
    web_server.send(200, "text/plain", "Configuration restored. Device will restart...");
    delay(1000);
    ESP.restart();
  }
}
